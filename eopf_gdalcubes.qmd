---
title: "Creating a raster cube from STAC items from EOPF using rstac and gdalcubes"
format: html
---

The following currently works under Linux but not under Windows.

```	{r}
library(rstac)
library(gdalcubes)
library(sf)
```

Create image collection from STAC items using `gdalcubes::stac_image_collection()`

```{r}	
# I will be switching to summer 2025 to get more data 
# unsing a bbox roughly for M端nsterland
# for the stac request, I need the bbox in WGS84
bbox_wgs84 <- st_bbox(c(xmin = 6.55, xmax = 7.8, ymin = 51.8, ymax = 52.4), crs = st_crs(4326))
bbox_utm =st_transform(bbox_wgs84, "EPSG:32632")

stac_source = stac("https://stac.core.eopf.eodc.eu/")
  items = stac_source |>
    stac_search(collections = "sentinel-2-l2a",
    datetime = "2025-06-01T00:00:00Z/2025-06-30T23:59:59Z",
    bbox = c(bbox_wgs84["xmin"],bbox_wgs84["ymin"],
                       bbox_wgs84["xmax"],bbox_wgs84["ymax"]), limit = 2) |>
    post_request() 
  length(items$features)

items

###--> adapt download function to adapt the URL such that it points to the actual ZARR file 
f = function(href) {
  return(paste0("ZARR:\"/vsicurl/", gsub(".zarr/", ".zarr\"/", href)))
}

items$features[[1]]$assets$B02_10m$href #--> das ist da, was man aus stack rauskriegt, man will aber -damit GDAL das versteht- die URL zum eigentlichen ZARR file; siehe tutorial: https://eopf-sample-service.github.io/eopf-sample-notebooks/gdal-explore-zarr/
# die obige Funktion ersetze alle hrefs durch eine, URL, die dahin f端hrtd -> das macht sie f端r alle assets, weil sie als url_fun Argument der Funktion stac_image_collection 端bergeben wird (siehe unten)


### create image collection from stac items
# set argument "srs", because gdalcubes looks for proj:epsg, but in the collection there is only proj:code
# also: since the items found are not all in the same UTM zone, I want to filter them first
s2_collection = stac_image_collection(items$features, srs = "EPSG:32632", asset_names = c("B02_10m", "B03_10m", "B04_10m", "B08_10m"), url_fun = f, property_filter = function(x) {x[["proj:code"]] == "EPSG:32632"})

s2_collection

# Create a cube view, here with 100m spatial resolution and daily time steps, aggregating with median
v = cube_view(srs="EPSG:32632", dx=100, dy=100, dt="P1D",
              aggregation="median",
              extent=list(t0 = "2025-06-01", t1 = "2025-06-30",
                          left=bbox_utm["xmin"], right=bbox_utm["xmax"],
                          top=bbox_utm["ymax"], bottom=bbox_utm["ymin"]))

v


#create cube (this is where something breaks under Windows)
raster_cube(s2_collection, v) |>
  select_bands(c("B02_10m","B03_10m","B04_10m")) |>
  reduce_time(c("median(B02_10m)", "median(B03_10m)", "median(B04_10m)")) |>
  plot(rgb = 3:1, zlim = c(0,3000))


```